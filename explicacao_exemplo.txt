# Fase 1: Armazena a string "Hello, World!\n" na memória de dados.
# Cada par de 'lui'/'addi' constrói uma palavra de 32 bits (4 caracteres).

# Constrói e guarda "Hell" (0x6c6c6548)
lui $t0, 0x6c6c
addi $t0, $t0, 0x6548
sw $t0, 0($zero)

# Constrói e guarda "o, W" (0x57202c6f)
lui $t0, 0x5720
addi $t0, $t0, 0x2c6f
sw $t0, 4($zero)

# Constrói e guarda "orld" (0x646c726f)
lui $t0, 0x646c
addi $t0, $t0, 0x726f
sw $t0, 8($zero)

# Constrói e guarda "!\n" com terminador nulo (0x00000a21)
addi $t0, $zero, 0x0a21
sw $t0, 12($zero)

# Fase 2: Imprime a string.
addi $v0, $zero, 4       # Código 4 para "imprimir string"
addi $a0, $zero, 0       # Endereço inicial da string
syscall

# Fase 3: Termina a execução.
addi $v0, $zero, 10      # Código 10 para "exit"
syscall


======================================================================================
# Define os valores iniciais nos registradores temporários
addi $t0, $zero, 50      # t0 = 50
addi $t1, $zero, 20      # t1 = 20
addi $t2, $zero, 15      # t2 = 15

# Realiza os cálculos
add $t3, $t0, $t1        # t3 = t0 + t1 (50 + 20 = 70)
sub $s0, $t3, $t2        # s0 = t3 - t2 (70 - 15 = 55)

# Termina o programa
addi $v0, $zero, 10      # Carrega o código 10 (exit) em $v0
syscall                  # Chama o sistema para sair


======================================================================================
# Carrega um valor inicial no registrador $s0
addi $s0, $zero, 777     # s0 = 777

# Armazena o valor de $s0 no endereço de memória 200
sw $s0, 200($zero)

# Zera o registrador original para provar que o valor será lido da memória
addi $s0, $zero, 0       # s0 = 0

# Carrega o valor do endereço de memória 200 para um NOVO registrador, $s1
lw $s1, 200($zero)       # s1 deverá receber o valor 777 da memória

# Termina o programa
addi $v0, $zero, 10      # Carrega o código 10 (exit) em $v0
syscall                  # Chama o sistema para sair